        -:    0:Source:molecule_supplier.cpp
        -:    0:Graph:molecule_supplier.gcno
        -:    0:Data:molecule_supplier.gcda
        -:    0:Runs:3
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include <map>
        -:    6:#include <array>
        -:    7:#include <cstring>
        -:    8:#include <cstdlib>
        -:    9:#include <unistd.h>
        -:   10:#include <fcntl.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/socket.h>
        -:   13:#include <netinet/in.h>
        -:   14:#include <arpa/inet.h>
        -:   15:#include <set>
        -:   16:#include <signal.h>
        -:   17:
        -:   18:
        -:   19:constexpr size_t READ_BUFFER = 1024;
        -:   20:constexpr unsigned long long MAX_ATOMS = 1000000000000000000ULL;
        -:   21:static volatile sig_atomic_t keep_running = 1;
        -:   22:
        -:   23:// Map molecule name to its atom requirements: {C, H, O}
        -:   24:const std::map<std::string, std::array<unsigned long long,3>> molecule_req = {
        -:   25:    {"WATER",          {0, 2, 1}}, // H2O
        -:   26:    {"CARBON DIOXIDE", {1, 0, 2}}, // CO2
        -:   27:    {"GLUCOSE",        {6,12, 6}}, // C6H12O6
        -:   28:    {"ALCOHOL",        {2, 6, 1}}, // C2H6O
        -:   29:};
        -:   30:
        6:   31:int setNonBlocking(int fd) {
        6:   32:    int flags = fcntl(fd, F_GETFL, 0);
       6*:   33:    return (flags < 0) ? -1 : fcntl(fd, F_SETFL, flags | O_NONBLOCK);
        -:   34:}
        -:   35:
        3:   36:void sendTCPStatus(int fd, unsigned long long carbon, unsigned long long oxygen, unsigned long long hydrogen) {
        3:   37:    std::ostringstream oss;
        3:   38:    oss << "CARBON: " << carbon << "\n"
        3:   39:        << "OXYGEN: " << oxygen << "\n"
        3:   40:        << "HYDROGEN: " << hydrogen << "\n";
        3:   41:    std::string status = oss.str();
        3:   42:    send(fd, status.c_str(), status.size(), 0);
        3:   43:}
        -:   44:
        5:   45:void processTCPCommand(int fd, const std::string& line, unsigned long long& carbon, unsigned long long& oxygen, unsigned long long& hydrogen) {
        5:   46:    std::istringstream iss(line);
        5:   47:    std::string cmd, type;
        -:   48:    unsigned long long amount;
        -:   49:
        5:   50:    if(!(iss >> cmd >> type >> amount) || cmd != "ADD" || amount > MAX_ATOMS) {
        1:   51:        const char* err = "ERROR: Invalid command\n";
        1:   52:        send(fd, err, strlen(err), 0);
        1:   53:        return;
        -:   54:    }
        -:   55:
        4:   56:    unsigned long long *counter = nullptr;
        4:   57:    if (type == "CARBON") {
        1:   58:        counter = &carbon;
        3:   59:    } else if (type == "HYDROGEN") {
        1:   60:        counter = &hydrogen;
        2:   61:    } else if (type == "OXYGEN") {
        1:   62:        counter = &oxygen;
        -:   63:    } else {
        1:   64:        const char* err = "ERROR: Unknown atom type\n";
        1:   65:        send(fd, err, strlen(err), 0);
        1:   66:        return;
        -:   67:    }
        -:   68:
        3:   69:    if (*counter + amount > MAX_ATOMS || *counter + amount < *counter) {
    #####:   70:        const char* err = "ERROR: Overflow error\n";
    #####:   71:        send(fd, err, strlen(err), 0);
    #####:   72:        return;
        -:   73:    }
        -:   74:
        3:   75:    *counter += amount;
        3:   76:    sendTCPStatus(fd, carbon, oxygen, hydrogen);
        9:   77:}
        -:   78:
        4:   79:void processUDPCommand(int sock, const std::string& line, const sockaddr_in& cli_addr, socklen_t cli_len, unsigned long long& carbon, unsigned long long& oxygen, unsigned long long& hydrogen) {
        4:   80:    std::istringstream iss(line);
        4:   81:    std::string cmd;
        -:   82:    unsigned long long count;
        4:   83:    if (!(iss >> cmd) || cmd != "DELIVER") {
        1:   84:        const char* err = "ERROR: invalid command\n";
        1:   85:        sendto(sock, err, strlen(err), 0,
        -:   86:               (const sockaddr*)&cli_addr, cli_len);
        1:   87:        return;
        -:   88:    }
        -:   89:    // reconstruct molecule name (rest of tokens except last)
        3:   90:    std::vector<std::string> tokens;
        3:   91:    std::string token;
        9:   92:    while (iss >> token)
        6:   93:        tokens.push_back(token);
        3:   94:    if (tokens.size() < 2) {
    #####:   95:        const char* err = "ERROR: invalid command\n";
    #####:   96:        sendto(sock, err, strlen(err), 0,
        -:   97:               (const sockaddr*)&cli_addr, cli_len);
    #####:   98:        return;
        -:   99:    }
        -:  100:    // last token is count
        -:  101:    try {
        3:  102:        count = std::stoull(tokens.back());
    =====:  103:    } catch (...) {
    =====:  104:        const char* err = "ERROR: invalid number\n";
    =====:  105:        sendto(sock, err, strlen(err), 0,
        -:  106:               (const sockaddr*)&cli_addr, cli_len);
    =====:  107:        return;
    =====:  108:    }
        -:  109:    // join tokens[0..n-2] into molecule name
        3:  110:    std::string mol = tokens[0];
       3*:  111:    for (size_t i = 1; i + 1 < tokens.size(); ++i) {
    #####:  112:        mol += " ";
    #####:  113:        mol += tokens[i];
        -:  114:    }
        3:  115:    auto it = molecule_req.find(mol);
        3:  116:    if (it == molecule_req.end()) {
        1:  117:        const char* err = "ERROR: unknown molecule\n";
        1:  118:        sendto(sock, err, strlen(err), 0,
        -:  119:               (const sockaddr*)&cli_addr, cli_len);
        1:  120:        return;
        -:  121:    }
        2:  122:    auto req = it->second; // {C, H, O}
        2:  123:    unsigned long long needC = req[0] * count;
        2:  124:    unsigned long long needH = req[1] * count;
        2:  125:    unsigned long long needO = req[2] * count;
        2:  126:    if (carbon >= needC && hydrogen >= needH && oxygen >= needO) {
        1:  127:        carbon   -= needC;
        1:  128:        hydrogen -= needH;
        1:  129:        oxygen   -= needO;
        1:  130:        std::ostringstream oss;
        -:  131:        oss << "OK" << "\n" 
        1:  132:        << "CARBON: " << carbon << "\n"
        1:  133:        << "OXYGEN: " << oxygen << "\n"
        1:  134:        << "HYDROGEN: " << hydrogen;
        1:  135:        std::string ok = oss.str();
        1:  136:        sendto(sock, ok.c_str(), ok.size(), 0, (const sockaddr*)&cli_addr, cli_len);
        1:  137:    } else {
        1:  138:        const char* err = "ERROR: insufficient atoms\n";
        1:  139:        sendto(sock, err, strlen(err), 0, (const sockaddr*)&cli_addr, cli_len);
        -:  140:    }
        9:  141:}
        -:  142:
        2:  143:void signalHandler(int) {
        2:  144:    keep_running = 0;
        2:  145:}
        -:  146:
        3:  147:int main(int argc, char* argv[]) {
        3:  148:    std::set<std::string> udp_peers; // Track UDP peers if needed
        3:  149:    if (argc != 3) {
        1:  150:        std::cerr << "Usage: " << argv[0] << " <tcp_port> <udp_port>\n";
        1:  151:        return 1;
        -:  152:    }
        -:  153:
        2:  154:    signal(SIGINT, signalHandler);
        -:  155:
        2:  156:    int tcp_port = std::stoi(argv[1]);
        2:  157:    int udp_port = std::stoi(argv[2]);
        -:  158:
        -:  159:    // --- TCP socket setup ---
        2:  160:    int listener = socket(AF_INET, SOCK_STREAM, 0);
        2:  161:    if (listener < 0) {
    #####:  162:        std::cerr << "Error creating TCP socket\n";
    #####:  163:        return 1;
        -:  164:    }
        2:  165:    int opt = 1;
        2:  166:    setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
        2:  167:    sockaddr_in addr{};
        2:  168:    addr.sin_family = AF_INET;
        2:  169:    addr.sin_addr.s_addr = INADDR_ANY;
        2:  170:    addr.sin_port = htons(tcp_port);
        2:  171:    if (bind(listener, (sockaddr*)&addr, sizeof(addr)) < 0) {
    #####:  172:        std::cerr << "Error binding TCP socket\n";
    #####:  173:        return 1;
        -:  174:    }
        2:  175:    if (listen(listener, SOMAXCONN) < 0) {
    #####:  176:        std::cerr << "Error listening on TCP socket\n";
    #####:  177:        return 1;
        -:  178:    }
        2:  179:    setNonBlocking(listener);
        -:  180:    
        -:  181:
        -:  182:    // --- UDP socket setup ---
        2:  183:    int udpSock = socket(AF_INET, SOCK_DGRAM, 0);
        2:  184:    if (udpSock < 0) {
    #####:  185:        std::cerr << "Error creating UDP socket\n";
    #####:  186:        return 1;
        -:  187:    }
        2:  188:    sockaddr_in udp_addr{};
        2:  189:    udp_addr.sin_family = AF_INET;
        2:  190:    udp_addr.sin_addr.s_addr = INADDR_ANY;
        2:  191:    udp_addr.sin_port = htons(udp_port);
        2:  192:    if(bind(udpSock, (sockaddr*)&udp_addr, sizeof(udp_addr)) < 0) {
    #####:  193:        std::cerr << "Error binding UDP socket\n";
    #####:  194:        return 1;
        -:  195:    }
        2:  196:    setNonBlocking(udpSock);
        -:  197:
        -:  198:    // Shared state
        2:  199:    std::vector<int> clients;
        2:  200:    std::map<int, std::string> recv_buffer;
        2:  201:    unsigned long long carbon = 0, oxygen = 0, hydrogen = 0;
        -:  202:
        -:  203:    fd_set read_fds;
       17:  204:    while (keep_running) {
      255:  205:        FD_ZERO(&read_fds);
       15:  206:        FD_SET(listener, &read_fds);
       15:  207:        FD_SET(udpSock, &read_fds);
       15:  208:        int max_fd = std::max(listener, udpSock);
       26:  209:        for (int fd : clients) {
       11:  210:            FD_SET(fd, &read_fds);
       11:  211:            max_fd = std::max(max_fd, fd);
        -:  212:        }
       15:  213:        select(max_fd + 1, &read_fds, nullptr, nullptr, nullptr);
        -:  214:
        -:  215:        // Handle new TCP connections
       15:  216:        if (FD_ISSET(listener, &read_fds)) {
        4:  217:            sockaddr_in cli_addr{};
        4:  218:            socklen_t cli_len = sizeof(cli_addr);
        4:  219:            int client_fd = accept(listener, (sockaddr*)&cli_addr, &cli_len);
        4:  220:            if( client_fd < 0) {
        2:  221:                std::cerr << "Error accepting TCP connection\n";
        2:  222:                continue;
        -:  223:            }
        2:  224:            setNonBlocking(client_fd);
        2:  225:            clients.push_back(client_fd);
        2:  226:            std::cout << "New TCP client connected: " << inet_ntoa(cli_addr.sin_addr) << ":" << ntohs(cli_addr.sin_port) << "\n";
        -:  227:        }
        -:  228:        // Handle UDP requests
       13:  229:        if (FD_ISSET(udpSock, &read_fds)) {
        -:  230:            char buf[READ_BUFFER];
        4:  231:            sockaddr_in cli_addr{};
        4:  232:            socklen_t cli_len = sizeof(cli_addr);
        4:  233:            ssize_t n = recvfrom(udpSock, buf, sizeof(buf), 0, (sockaddr*)&cli_addr, &cli_len);
        4:  234:            if (n < 0) {
    #####:  235:                std::cerr << "Error receiving UDP data\n";
    #####:  236:                break;
        -:  237:            }
        -:  238:            char ip[INET_ADDRSTRLEN];
        4:  239:            inet_ntop(AF_INET, &cli_addr.sin_addr, ip, sizeof(ip));
        4:  240:            int port = ntohs(cli_addr.sin_port);
        8:  241:            std::string peer_id = std::string(ip) + ":" + std::to_string(port);
        4:  242:            if (udp_peers.insert(peer_id).second) {
        1:  243:                std::cout << "New UDP client connected: " << peer_id << "\n";
        -:  244:            }
        -:  245:
        4:  246:            std::string cmd(buf, n);
       4*:  247:            if (!cmd.empty() && cmd.back() == '\n')
        4:  248:                cmd.pop_back(); // Remove trailing newline
        -:  249:
        4:  250:            processUDPCommand(udpSock, cmd, cli_addr, cli_len, carbon, oxygen, hydrogen);
        4:  251:        }
        -:  252:        
       26:  253:        for(auto it = clients.begin(); it != clients.end();) {
       13:  254:            int client_fd = *it;
       13:  255:            if (FD_ISSET(client_fd, &read_fds)) {
        -:  256:                char buffer[READ_BUFFER];
        7:  257:                ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
        7:  258:                if (bytes_read <= 0) {
        2:  259:                    close(client_fd);
        2:  260:                    it = clients.erase(it);
        2:  261:                    std::cout << "TCP client disconnected\n";
        2:  262:                    continue;
        -:  263:                }
        5:  264:                buffer[bytes_read] = '\0';
        5:  265:                std::string line(buffer);
       5*:  266:                if (!line.empty() && line.back() == '\n')
        5:  267:                    line.pop_back();
        5:  268:                processTCPCommand(client_fd, line, carbon, oxygen, hydrogen);
        5:  269:            }
       11:  270:            ++it;
        -:  271:        }
        -:  272:    }
        -:  273:
       2*:  274:    for(int client_fd : clients) {
    #####:  275:        close(client_fd);
        -:  276:    }
        2:  277:    close(listener);
        2:  278:    close(udpSock);
        -:  279:
        2:  280:    return 0;
        3:  281:}
