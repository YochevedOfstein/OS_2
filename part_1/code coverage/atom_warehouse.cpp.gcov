        -:    0:Source:atom_warehouse.cpp
        -:    0:Graph:atom_warehouse.gcno
        -:    0:Data:atom_warehouse.gcda
        -:    0:Runs:4
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include <map>
        -:    6:#include <cstring>
        -:    7:#include <cstdlib>
        -:    8:#include <unistd.h>
        -:    9:#include <fcntl.h>
        -:   10:#include <sys/types.h>
        -:   11:#include <sys/socket.h>
        -:   12:#include <netinet/in.h>
        -:   13:#include <arpa/inet.h>
        -:   14:#include <signal.h>
        -:   15:
        -:   16:
        -:   17:// Buffer size for reading commands
        -:   18:constexpr size_t READ_BUFFER = 1024;
        -:   19:// Maximum atoms (10^18)
        -:   20:constexpr unsigned long long MAX_ATOMS = 1000000000000000000ULL;
        -:   21:
        -:   22:static volatile sig_atomic_t keep_running = 1;
        -:   23:
        2:   24:int setNonBlocking(int fd) {
        2:   25:    int flags = fcntl(fd, F_GETFL, 0);
       2*:   26:    if (flags == -1) return -1;
        2:   27:    return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
        -:   28:}
        -:   29:
        3:   30:void sendStatus(int client_fd, unsigned long long carbon, unsigned long long hydrogen, unsigned long long oxygen) {
        3:   31:    std::ostringstream oss;
        3:   32:    oss << "CARBON: " << carbon << "\n" <<"OXYGEN: " << oxygen << "\n" << "HYDROGEN: " << hydrogen << "\n";
        3:   33:    std::string response = oss.str();
        3:   34:    send(client_fd, response.c_str(), response.size(), 0);
        3:   35:}
        -:   36:
        7:   37:void processCommand(int client_fd, const std::string& command, unsigned long long& carbon, unsigned long long& hydrogen, unsigned long long& oxygen) {
        7:   38:    std::istringstream iss(command);
        7:   39:    std::string cmd, type;
        -:   40:    unsigned long long amount;
        -:   41:
        7:   42:    if(!(iss >> cmd >> type >> amount) || cmd != "ADD" || amount > MAX_ATOMS) {
        2:   43:        const char* err = "ERROR: Invalid command\n";
        2:   44:        send(client_fd, err, strlen(err), 0);
        2:   45:        return;
        -:   46:    }
        -:   47:
        5:   48:    unsigned long long *counter = nullptr;
        5:   49:    if (type == "CARBON") {
        2:   50:        counter = &carbon;
        3:   51:    } else if (type == "HYDROGEN") {
        1:   52:        counter = &hydrogen;
        2:   53:    } else if (type == "OXYGEN") {
        1:   54:        counter = &oxygen;
        -:   55:    } else {
        1:   56:        const char* err = "ERROR: Unknown atom type\n";
        1:   57:        send(client_fd, err, strlen(err), 0);
        1:   58:        return;
        -:   59:    }
        -:   60:
        4:   61:    if (*counter + amount > MAX_ATOMS || *counter + amount < *counter) {
        1:   62:        const char* err = "ERROR: Overflow error\n";
        1:   63:        send(client_fd, err, strlen(err), 0);
        1:   64:        return;
        -:   65:    }
        -:   66:
        3:   67:    *counter += amount;
        3:   68:    sendStatus(client_fd, carbon, hydrogen, oxygen);
       15:   69:}
        -:   70:
        1:   71:void signalHandler(int) {
        1:   72:    keep_running = 0;
        1:   73:}
        -:   74:
        4:   75:int main(int argc, char* argv[]) {
        4:   76:    if (argc != 2) {
        1:   77:        std::cerr << "Usage: " << argv[0] << " <port>" << "\n";
        1:   78:        return 1;
        -:   79:    }
        -:   80:
        3:   81:    signal(SIGINT, signalHandler);
        -:   82:    
        3:   83:    int port = std::stoi(argv[1]);
        3:   84:    int listener = socket(AF_INET, SOCK_STREAM, 0);
        3:   85:    if (listener < 0) {
        -:   86:        // std::cerr << "Error creating socket" << "\n";
    #####:   87:        return 1;
        -:   88:    }
        -:   89:
        3:   90:    int opt = 1;
        3:   91:    setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
        -:   92:
        3:   93:    sockaddr_in serv_addr{};
        3:   94:    serv_addr.sin_family = AF_INET;
        3:   95:    serv_addr.sin_addr.s_addr = INADDR_ANY;
        3:   96:    serv_addr.sin_port = htons(port);
        -:   97:
        3:   98:    if (bind(listener, (sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        2:   99:        std::cerr << "Error binding socket" << "\n";
        2:  100:        close(listener);
        2:  101:        return 1;
        -:  102:    }
        1:  103:    if (listen(listener, SOMAXCONN) < 0) {
        -:  104:        // std::cerr << "Error listening on socket" << "\n";
    #####:  105:        close(listener);
    #####:  106:        return 1;
        -:  107:    }
        -:  108:
        1:  109:    setNonBlocking(listener);
        1:  110:    std::vector<int> clients;
        1:  111:    std::map<int, std::string> recv_buffer;
        -:  112:
        1:  113:    unsigned long long carbon = 0, hydrogen = 0, oxygen = 0;
        -:  114:
        1:  115:    std::cout << "warehouse_atom started on port " << port << "\n";
        -:  116:
       10:  117:    while(keep_running) {
        -:  118:        fd_set read_fds;
      170:  119:        FD_ZERO(&read_fds);
       10:  120:        FD_SET(listener, &read_fds);
       10:  121:        int max_fd = listener;
        -:  122:
       18:  123:        for (int client_fd : clients) {
        8:  124:            FD_SET(client_fd, &read_fds);
        8:  125:            if (client_fd > max_fd) {
        8:  126:                max_fd = client_fd;
        -:  127:            }
        -:  128:        }
        -:  129:
       10:  130:        if (select(max_fd + 1, &read_fds, nullptr, nullptr, nullptr) < 0) {
        1:  131:            std::cerr << "Error in select" << "\n";
        1:  132:            break;
        -:  133:        }
        -:  134:
        9:  135:        if (FD_ISSET(listener, &read_fds)) {
        1:  136:            sockaddr_in cli_addr{};
        1:  137:            socklen_t cli_len = sizeof(cli_addr);
        1:  138:            int client_fd = accept(listener, (sockaddr*)&cli_addr, &cli_len);
       1*:  139:            if (client_fd < 0) {
        -:  140:                // std::cerr << "Error accepting connection" << "\n";
    #####:  141:                continue;
        -:  142:            }
        1:  143:            setNonBlocking(client_fd);
        1:  144:            clients.push_back(client_fd);
        1:  145:            std::cout << "New connection from " << inet_ntoa(cli_addr.sin_addr) << ":" << ntohs(cli_addr.sin_port) << "\n";
        -:  146:        }
        -:  147:
       18:  148:        for (auto it = clients.begin(); it != clients.end();) {
        9:  149:            int client_fd = *it;
        9:  150:            if (FD_ISSET(client_fd, &read_fds)) {
        -:  151:                char buffer[READ_BUFFER];
        8:  152:                ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
        8:  153:                if (bytes_read <= 0) {
        1:  154:                    close(client_fd);
        1:  155:                    it = clients.erase(it);
        1:  156:                    std::cout << "Client disconnected\n";
        -:  157:                } else {
        7:  158:                    recv_buffer[client_fd].append(buffer, bytes_read);
        -:  159:                    size_t pos;
       14:  160:                    while ((pos = recv_buffer[client_fd].find('\n')) != std::string::npos) {
        7:  161:                        std::string command = recv_buffer[client_fd].substr(0, pos);
        7:  162:                        recv_buffer[client_fd].erase(0, pos + 1);
        7:  163:                        processCommand(client_fd, command, carbon, hydrogen, oxygen);
        7:  164:                    }
        7:  165:                    ++it;
        -:  166:                }
        -:  167:            } else {
        1:  168:                ++it;
        -:  169:            }
        -:  170:        }
        -:  171:    }
        -:  172:
       1*:  173:    for (int client_fd : clients) {
    #####:  174:        close(client_fd);
        -:  175:    }
        1:  176:    close(listener);
        1:  177:    return 0;
        1:  178:}
