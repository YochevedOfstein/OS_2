        -:    0:Source:atom_supplier.cpp
        -:    0:Graph:atom_supplier.gcno
        -:    0:Data:atom_supplier.gcda
        -:    0:Runs:3
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <cstring>
        -:    5:#include <cstdlib>
        -:    6:#include <unistd.h>
        -:    7:#include <fcntl.h>
        -:    8:#include <sys/types.h>
        -:    9:#include <sys/socket.h>
        -:   10:#include <netdb.h>
        -:   11:#include <arpa/inet.h>
        -:   12:
        -:   13:
        -:   14:
       13:   15:std::string readLine(int fd) {
       13:   16:    std::string line;
        -:   17:    char c;
        -:   18:    while(true) {
      242:   19:        ssize_t n = recv(fd, &c, 1, 0);
        -:   20:        if (n <= 0){
        -:   21:            // return std::string();
        -:   22:        }
      242:   23:        if (c == '\n') {
       13:   24:            break;
        -:   25:        }
      229:   26:        line.push_back(c);
      229:   27:    }
       26:   28:    return line;
    =====:   29:}
        -:   30:
        3:   31:int main(int argc, char* argv[]) {
        3:   32:    if (argc != 3) {
        2:   33:        std::cerr << "Usage: " << argv[0] << " <server> <port>" << "\n";
        2:   34:        return 1;
        -:   35:    }
        1:   36:    const char* server = argv[1];
        1:   37:    const char* port = argv[2];
        -:   38:
        1:   39:    addrinfo hints{}, *res;
        1:   40:    hints.ai_family = AF_UNSPEC;
        1:   41:    hints.ai_socktype = SOCK_STREAM;
        -:   42:
        1:   43:    if(getaddrinfo(server, port, &hints, &res) != 0) {
        -:   44:        // std::cerr << "Error getting address info" << "\n";
    #####:   45:        return 1;
        -:   46:    }
        -:   47:
        1:   48:    int sock = -1;
       1*:   49:    for (addrinfo* p = res; p != nullptr; p = p->ai_next) {
        1:   50:        sock = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
       1*:   51:        if (sock < 0) {
    #####:   52:            continue;
        -:   53:        }
        1:   54:        if (connect(sock, p->ai_addr, p->ai_addrlen) == 0) {
        1:   55:            break;
        -:   56:        }
    #####:   57:        close(sock);
    #####:   58:        sock = -1;
        -:   59:    }
        1:   60:    freeaddrinfo(res);
        1:   61:    if (sock < 0){
    #####:   62:        std::cerr << "ERROR: Unable to connect" << "\n";
    #####:   63:        return 1;
        -:   64:    }
        1:   65:    std::cout << "Connected to server" << server << ":" << port << "\n";
        1:   66:    std::cout << "Type ADD CARBON|OXYGEN|HYDROGEN <number> to request atoms, or QUIT to exit\n";
        -:   67:
        1:   68:    std::string input;
        -:   69:    while (true) {
        8:   70:        std::cout << "> ";
        8:   71:        std::getline(std::cin, input);
        8:   72:        if (input == "QUIT") {
        1:   73:            break;
        -:   74:        }
        7:   75:        if(input.back() != '\n') {
        7:   76:            input.push_back('\n');
        -:   77:        }
        7:   78:        if(send(sock, input.c_str(), input.size(), 0) < 0) {
    #####:   79:            std::cerr << "Error sending data to server" << "\n";
    #####:   80:            break;
        -:   81:        }
        -:   82:
        7:   83:        std::string line1 = readLine(sock);
        -:   84:        // if (line1.empty()) {
        -:   85:        //     std::cerr << "Server disconnected" << "\n";
        -:   86:        //     break;
        -:   87:        // }
        7:   88:        std::cout << line1 << "\n";
        -:   89:
        7:   90:        if(line1.rfind("CARBON", 0) == 0){
        3:   91:            std::string line2 = readLine(sock);
        3:   92:            std::string line3 = readLine(sock);
        3:   93:            if(!line2.empty()) {
        3:   94:                std::cout << line2 << "\n";
        -:   95:            }
        3:   96:            if(!line3.empty()) {
        3:   97:                std::cout << line3 << "\n";
        -:   98:            }
        3:   99:        }
        -:  100:
        7:  101:    }
        1:  102:    close(sock);
        1:  103:    std::cout << "Disconnected from server\n";
        1:  104:    return 0;
        1:  105:    }
