        -:    0:Source:drinks_bar.cpp
        -:    0:Graph:drinks_bar.gcno
        -:    0:Data:drinks_bar.gcda
        -:    0:Runs:8
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include <map>
        -:    6:#include <array>
        -:    7:#include <cstring>
        -:    8:#include <cstdlib>
        -:    9:#include <unistd.h>
        -:   10:#include <fcntl.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/socket.h>
        -:   13:#include <netinet/in.h>
        -:   14:#include <arpa/inet.h>
        -:   15:#include <set>
        -:   16:#include <algorithm>
        -:   17:#include <getopt.h>
        -:   18:#include <sys/time.h>
        -:   19:#include <sys/un.h>
        -:   20:#include <sys/file.h>
        -:   21:#include <sys/stat.h>
        -:   22:#include <sys/mman.h>
        -:   23:#include <netdb.h>
        -:   24:#include <signal.h>
        -:   25:
        -:   26:constexpr size_t READ_BUFFER = 1024;
        -:   27:constexpr unsigned long long MAX_ATOMS = 1000000000000000000ULL;
        -:   28:
        -:   29:static volatile sig_atomic_t keep_running = 1;
        -:   30:
        -:   31:struct Inventory {
        -:   32:    unsigned long long carbon;
        -:   33:    unsigned long long hydrogen;
        -:   34:    unsigned long long oxygen;
        -:   35:};
        -:   36:
        -:   37:// Map molecule name → {C, H, O} requirements
        -:   38:const std::map<std::string, std::array<unsigned long long,3>> molecule_req = {
        -:   39:    {"WATER",          {0, 2, 1}},    // H₂O
        -:   40:    {"CARBON DIOXIDE", {1, 0, 2}},    // CO₂
        -:   41:    {"GLUCOSE",        {6, 12, 6}},   // C₆H₁₂O₆
        -:   42:    {"ALCOHOL",        {2, 6, 1}},    // C₂H₆O
        -:   43:};
        -:   44:
        -:   45:static Inventory* invPtr = nullptr;
        -:   46:static int save_fd = -1;
        -:   47:static bool use_file = false;
        -:   48:static std::string save_path;
        -:   49:
        -:   50:// Lock + msync + unlock around every update
        5:   51:void sendTCPStatus(int fd, unsigned long long carbon, unsigned long long oxygen, unsigned long long hydrogen) {
        5:   52:    std::ostringstream oss;
        5:   53:    oss << "CARBON: "  << carbon  << "\n"
        5:   54:        << "OXYGEN: "  << oxygen  << "\n"
        5:   55:        << "HYDROGEN: "<< hydrogen<< "\n";
        5:   56:    std::string status = oss.str();
        5:   57:    send(fd, status.c_str(), status.size(), 0);
        5:   58:}
        -:   59:
       10:   60:void processTCPCommand(int fd, const std::string& line)
        -:   61:{
       10:   62:    std::istringstream iss(line);
       10:   63:    std::string cmd, type;
        -:   64:    unsigned long long amount;
        -:   65:
       10:   66:    if (!(iss >> cmd >> type >> amount) || cmd != "ADD" || amount > MAX_ATOMS) {
        3:   67:        const char* err = "ERROR: Invalid command\n";
        3:   68:        send(fd, err, strlen(err), 0);
        3:   69:        return;
        -:   70:    }
        -:   71:
        7:   72:    unsigned long long* counter = nullptr;
        7:   73:    if (type == "CARBON") {
        3:   74:        counter = &invPtr->carbon;
        4:   75:    } else if (type == "HYDROGEN") {
        1:   76:        counter = &invPtr->hydrogen;
        3:   77:    } else if (type == "OXYGEN") {
        2:   78:        counter = &invPtr->oxygen;
        -:   79:    } else {
        1:   80:        const char* err = "ERROR: Unknown atom type\n";
        1:   81:        send(fd, err, strlen(err), 0);
        1:   82:        return;
        -:   83:    }
        -:   84:
        6:   85:    if (*counter + amount < *counter || *counter + amount > MAX_ATOMS) {
        1:   86:        const char* err = "ERROR: Overflow error\n";
        1:   87:        send(fd, err, strlen(err), 0);
        1:   88:        return;
        -:   89:    }
        -:   90:
        5:   91:    if (use_file) {
        5:   92:        if (flock(save_fd, LOCK_EX) != 0) {
    #####:   93:            std::perror("flock LOCK_EX in processTCPCommand");
    #####:   94:            const char* err = "ERROR: Cannot acquire lock\n";
    #####:   95:            send(fd, err, strlen(err), 0);
    #####:   96:            return;
        -:   97:        }
        5:   98:        *counter += amount;
        5:   99:        if (msync(invPtr, sizeof(Inventory), MS_SYNC) != 0) {
    #####:  100:            std::perror("msync in processTCPCommand");
        -:  101:        }
        5:  102:        if (flock(save_fd, LOCK_UN) != 0) {
    #####:  103:            std::perror("flock LOCK_UN in processTCPCommand");
        -:  104:        }
        -:  105:    } else {
    #####:  106:        *counter += amount;
        -:  107:    }
        -:  108:
        5:  109:    sendTCPStatus(fd,
        -:  110:                  invPtr->carbon,
        -:  111:                  invPtr->oxygen,
        -:  112:                  invPtr->hydrogen);
       20:  113:}
        -:  114:
        6:  115:void processDatagramCommand(int sock,
        -:  116:                            const std::string& line,
        -:  117:                            const sockaddr* cli_addr,
        -:  118:                            socklen_t cli_len)
        -:  119:{
        6:  120:    std::istringstream iss(line);
        6:  121:    std::string cmd;
       6*:  122:    if (!(iss >> cmd) || cmd != "DELIVER") {
    #####:  123:        const char* err = "ERROR: invalid command";
    #####:  124:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
    #####:  125:        return;
        -:  126:    }
        -:  127:
        6:  128:    std::vector<std::string> tokens;
        6:  129:    std::string token;
       17:  130:    while (iss >> token) {
       11:  131:        tokens.push_back(token);
        -:  132:    }
        6:  133:    if (tokens.size() < 2) {
        1:  134:        const char* err = "ERROR: invalid command";
        1:  135:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        1:  136:        return;
        -:  137:    }
        -:  138:
        5:  139:    unsigned long long count = 0;
        -:  140:    try {
        5:  141:        count = std::stoull(tokens.back());
    =====:  142:    } catch (...) {
    =====:  143:        const char* err = "ERROR: invalid number";
    =====:  144:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
    =====:  145:        return;
    =====:  146:    }
        -:  147:
        5:  148:    std::string mol = tokens[0];
       5*:  149:    for (size_t i = 1; i + 1 < tokens.size(); ++i) {
    #####:  150:        mol += " ";
    #####:  151:        mol += tokens[i];
        -:  152:    }
        -:  153:
        5:  154:    auto it = molecule_req.find(mol);
        5:  155:    if (it == molecule_req.end()) {
        1:  156:        const char* err = "ERROR: unknown molecule";
        1:  157:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        1:  158:        return;
        -:  159:    }
        -:  160:
        4:  161:    auto req = it->second; // {C, H, O}
        4:  162:    unsigned long long needC = req[0] * count;
        4:  163:    unsigned long long needH = req[1] * count;
        4:  164:    unsigned long long needO = req[2] * count;
        -:  165:
        4:  166:    bool canDeliver = false;
        4:  167:    if (use_file) {
        4:  168:        if (flock(save_fd, LOCK_EX) != 0) {
    #####:  169:            std::perror("flock LOCK_EX in processDatagramCommand");
    #####:  170:            const char* err = "ERROR: Cannot acquire lock";
    #####:  171:            sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
    #####:  172:            return;
        -:  173:        }
        4:  174:        if (invPtr->carbon >= needC &&
        4:  175:            invPtr->hydrogen >= needH &&
        4:  176:            invPtr->oxygen >= needO)
        -:  177:        {
        4:  178:            invPtr->carbon   -= needC;
        4:  179:            invPtr->hydrogen -= needH;
        4:  180:            invPtr->oxygen   -= needO;
        4:  181:            canDeliver = true;
        4:  182:            if (msync(invPtr, sizeof(Inventory), MS_SYNC) != 0) {
    #####:  183:                std::perror("msync in processDatagramCommand");
        -:  184:            }
        -:  185:        }
        4:  186:        if (flock(save_fd, LOCK_UN) != 0) {
    #####:  187:            std::perror("flock LOCK_UN in processDatagramCommand");
        -:  188:        }
        -:  189:    } else {
    #####:  190:        if (invPtr->carbon >= needC &&
    #####:  191:            invPtr->hydrogen >= needH &&
    #####:  192:            invPtr->oxygen >= needO)
        -:  193:        {
    #####:  194:            invPtr->carbon   -= needC;
    #####:  195:            invPtr->hydrogen -= needH;
    #####:  196:            invPtr->oxygen   -= needO;
    #####:  197:            canDeliver = true;
        -:  198:        }
        -:  199:    }
        -:  200:
        4:  201:    if (canDeliver) {
        4:  202:        std::ostringstream oss;
        -:  203:        oss << "OK\n"
        4:  204:            << "CARBON: "   << invPtr->carbon   << "\n"
        4:  205:            << "OXYGEN: "   << invPtr->oxygen   << "\n"
        4:  206:            << "HYDROGEN: " << invPtr->hydrogen;
        4:  207:        std::string ok = oss.str();
        4:  208:        sendto(sock, ok.c_str(), ok.size(), 0, cli_addr, cli_len);
        4:  209:    } else {
    #####:  210:        const char* err = "ERROR: insufficient atoms";
    #####:  211:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        -:  212:    }
       13:  213:}
        -:  214:
        4:  215:void signalHandler(int) {
        4:  216:    keep_running = 0;
        4:  217:}
        -:  218:
        8:  219:int main(int argc, char* argv[]) {
        8:  220:    unsigned long long initcarbon = 0, initoxygen = 0, inithydrogen = 0;
        8:  221:    int timeout_seconds = -1;
        8:  222:    int tcp_port = -1, udp_port = -1;
        8:  223:    std::string uds_stream_path, uds_datagram_path;
        -:  224:
        8:  225:    signal(SIGINT, signalHandler);
        -:  226:
        -:  227:    static struct option long_options[] = {
        -:  228:        {"timeout",       required_argument, nullptr, 't'},
        -:  229:        {"tcp-port",      required_argument, nullptr, 'T'},
        -:  230:        {"udp-port",      required_argument, nullptr, 'U'},
        -:  231:        {"stream-path",   required_argument, nullptr, 's'},
        -:  232:        {"datagram-path", required_argument, nullptr, 'd'},
        -:  233:        {"save-file",     required_argument, nullptr, 'f'},
        -:  234:        {nullptr, 0, nullptr, 0}
        -:  235:    };
        -:  236:
        -:  237:    int opt;
       29:  238:    while ((opt = getopt_long(argc, argv, "t:T:U:s:d:f:", long_options, nullptr)) != -1) {
       21:  239:        switch (opt) {
        4:  240:            case 't':
        4:  241:                timeout_seconds = std::stoi(optarg);
        4:  242:                break;
        5:  243:            case 'T':
        5:  244:                tcp_port = std::stoi(optarg);
        5:  245:                break;
        4:  246:            case 'U':
        4:  247:                udp_port = std::stoi(optarg);
        4:  248:                break;
        2:  249:            case 's':
        2:  250:                uds_stream_path = optarg;
        2:  251:                break;
        2:  252:            case 'd':
        2:  253:                uds_datagram_path = optarg;
        2:  254:                break;
        4:  255:            case 'f':
        4:  256:                use_file = true;
        4:  257:                save_path = optarg;
        4:  258:                break;
    #####:  259:            default:
        -:  260:                std::cerr << "Usage: " << argv[0]
        -:  261:                          << " [-t seconds] [-T tcp_port] [-U udp_port] "
    #####:  262:                             "[-s uds_stream_path] [-d uds_datagram_path] [-f save_file_path]\n";
    #####:  263:                return 1;
        -:  264:        }
        -:  265:    }
        -:  266:
        8:  267:    if (tcp_port < 0 && uds_stream_path.empty()) {
        1:  268:        std::cerr << "ERROR: You must specify either -T <tcp-port> or -s <uds-stream-path>\n";
        1:  269:        return 1;
        -:  270:    }
        7:  271:    if (udp_port < 0 && uds_datagram_path.empty()) {
        1:  272:        std::cerr << "ERROR: You must specify either -U <udp-port> or -d <uds-datagram-path>\n";
        1:  273:        return 1;
        -:  274:    }
        -:  275:
        -:  276:    // ---------- PART 6: OPEN OR CREATE THE SAVE‐FILE ----------
        6:  277:    if (use_file) {
        4:  278:        save_fd = open(save_path.c_str(), O_RDWR | O_CREAT, 0666);
        4:  279:        if (save_fd < 0) {
        1:  280:            std::perror("open(save_file)");
        1:  281:            return 1;
        -:  282:        }
        3:  283:        if (flock(save_fd, LOCK_EX) != 0) {
    #####:  284:            std::perror("flock LOCK_EX on startup");
    #####:  285:            close(save_fd);
    #####:  286:            return 1;
        -:  287:        }
        -:  288:
        -:  289:        struct stat st;
        3:  290:        if (fstat(save_fd, &st) < 0) {
    #####:  291:            std::perror("fstat");
    #####:  292:            flock(save_fd, LOCK_UN);
    #####:  293:            close(save_fd);
    #####:  294:            return 1;
        -:  295:        }
        -:  296:
        3:  297:        bool newly_created = false;
        3:  298:        if ((size_t)st.st_size < sizeof(Inventory)) {
        1:  299:            if (ftruncate(save_fd, sizeof(Inventory)) != 0) {
    #####:  300:                std::perror("ftruncate");
    #####:  301:                flock(save_fd, LOCK_UN);
    #####:  302:                close(save_fd);
    #####:  303:                return 1;
        -:  304:            }
        1:  305:            newly_created = true;
        -:  306:        }
        -:  307:
        3:  308:        void* map = mmap(nullptr, sizeof(Inventory),
        -:  309:                         PROT_READ | PROT_WRITE, MAP_SHARED,
        -:  310:                         save_fd, 0);
        3:  311:        if (map == MAP_FAILED) {
    #####:  312:            std::perror("mmap");
    #####:  313:            flock(save_fd, LOCK_UN);
    #####:  314:            close(save_fd);
    #####:  315:            return 1;
        -:  316:        }
        3:  317:        invPtr = reinterpret_cast<Inventory*>(map);
        -:  318:
        3:  319:        if (newly_created) {
        1:  320:            invPtr->carbon   = initcarbon;
        1:  321:            invPtr->hydrogen = inithydrogen;
        1:  322:            invPtr->oxygen   = initoxygen;
        1:  323:            if (msync(invPtr, sizeof(Inventory), MS_SYNC) != 0) {
    #####:  324:                std::perror("msync(initial)");
        -:  325:            }
        -:  326:        }
        -:  327:        // else: file existed, so invPtr already has the old values
        -:  328:
        3:  329:        if (flock(save_fd, LOCK_UN) != 0) {
    #####:  330:            std::perror("flock LOCK_UN on startup");
        -:  331:        }
        -:  332:        std::cout << "[server] Loaded inventory from “"
        -:  333:                  << save_path << "” → "
        3:  334:                  << "C=" << invPtr->carbon << ", "
        3:  335:                  << "H=" << invPtr->hydrogen << ", "
        3:  336:                  << "O=" << invPtr->oxygen << "\n";
        -:  337:    }
        -:  338:    else {
        2:  339:        invPtr = new Inventory{ initcarbon, inithydrogen, initoxygen };
        -:  340:        std::cout << "[server] Running in MEMORY mode → "
        2:  341:                  << "C=" << invPtr->carbon << ", "
        2:  342:                  << "H=" << invPtr->hydrogen << ", "
        2:  343:                  << "O=" << invPtr->oxygen << "\n";
        -:  344:    }
        -:  345:
        -:  346:    // ---------- SET UP TCP / UDP / UDS sockets (your existing code for Part 1–5) ----------
        5:  347:    int listener = -1;
        5:  348:    if (tcp_port >= 0) {
        3:  349:        listener = socket(AF_INET, SOCK_STREAM, 0);
        3:  350:        int sockopt = 1;
        3:  351:        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &sockopt, sizeof(sockopt));
        3:  352:        sockaddr_in addr{};
        3:  353:        addr.sin_family = AF_INET;
        3:  354:        addr.sin_addr.s_addr = INADDR_ANY;
        3:  355:        addr.sin_port = htons(tcp_port);
        3:  356:        bind(listener, (sockaddr*)&addr, sizeof(addr));
        3:  357:        listen(listener, SOMAXCONN);
        -:  358:        // … setNonBlocking(listener) …
        3:  359:        std::cout << "Listening (TCP) on port " << tcp_port << "\n";
        -:  360:    }
        -:  361:
        5:  362:    int udpSock = -1;
        5:  363:    if (udp_port >= 0) {
        3:  364:        udpSock = socket(AF_INET, SOCK_DGRAM, 0);
        3:  365:        sockaddr_in udp_addr{};
        3:  366:        udp_addr.sin_family = AF_INET;
        3:  367:        udp_addr.sin_addr.s_addr = INADDR_ANY;
        3:  368:        udp_addr.sin_port = htons(udp_port);
        3:  369:        bind(udpSock, (sockaddr*)&udp_addr, sizeof(udp_addr));
        -:  370:        // … setNonBlocking(udpSock) …
        3:  371:        std::cout << "Listening (UDP) on port " << udp_port << "\n";
        -:  372:    }
        -:  373:
        5:  374:    int uds_stream_sock = -1;
        5:  375:    if (!uds_stream_path.empty()) {
        2:  376:        unlink(uds_stream_path.c_str());
        2:  377:        uds_stream_sock = socket(AF_UNIX, SOCK_STREAM, 0);
        2:  378:        sockaddr_un uds_addr{};
        2:  379:        uds_addr.sun_family = AF_UNIX;
        2:  380:        strncpy(uds_addr.sun_path, uds_stream_path.c_str(), sizeof(uds_addr.sun_path)-1);
        2:  381:        bind(uds_stream_sock, (sockaddr*)&uds_addr, sizeof(uds_addr));
        2:  382:        listen(uds_stream_sock, SOMAXCONN);
        -:  383:        // … setNonBlocking(uds_stream_sock) …
        2:  384:        std::cout << "Listening (UDS-stream) on " << uds_stream_path << "\n";
        -:  385:    }
        -:  386:
        5:  387:    int uds_dgram_sock = -1;
        5:  388:    if (!uds_datagram_path.empty()) {
        2:  389:        unlink(uds_datagram_path.c_str());
        2:  390:        uds_dgram_sock = socket(AF_UNIX, SOCK_DGRAM, 0);
        2:  391:        sockaddr_un uds_dg_addr{};
        2:  392:        uds_dg_addr.sun_family = AF_UNIX;
        2:  393:        strncpy(uds_dg_addr.sun_path, uds_datagram_path.c_str(), sizeof(uds_dg_addr.sun_path)-1);
        2:  394:        bind(uds_dgram_sock, (sockaddr*)&uds_dg_addr, sizeof(uds_dg_addr));
        -:  395:        // … setNonBlocking(uds_dgram_sock) …
        2:  396:        std::cout << "Listening (UDS-datagram) on " << uds_datagram_path << "\n";
        -:  397:    }
        -:  398:
       10:  399:    std::vector<int> clients;
       10:  400:    std::map<int, std::string> recv_buffer;
        5:  401:    std::set<std::string> udp_peers;
        -:  402:
        -:  403:    fd_set read_fds;
       33:  404:    while (keep_running) {
      561:  405:        FD_ZERO(&read_fds);
       33:  406:        FD_SET(STDIN_FILENO, &read_fds);
       33:  407:        int max_fd = STDIN_FILENO;
       33:  408:        if (listener >= 0) {
       21:  409:            FD_SET(listener, &read_fds);
       21:  410:            max_fd = std::max(max_fd, listener);
        -:  411:        }
       33:  412:        if (uds_stream_sock >= 0) {
       12:  413:            FD_SET(uds_stream_sock, &read_fds);
       12:  414:            max_fd = std::max(max_fd, uds_stream_sock);
        -:  415:        }
       33:  416:        if (udpSock >= 0) {
       21:  417:            FD_SET(udpSock, &read_fds);
       21:  418:            max_fd = std::max(max_fd, udpSock);
        -:  419:        }
       33:  420:        if (uds_dgram_sock >= 0) {
       12:  421:            FD_SET(uds_dgram_sock, &read_fds);
       12:  422:            max_fd = std::max(max_fd, uds_dgram_sock);
        -:  423:        }
       45:  424:        for (int fd : clients) {
       12:  425:            FD_SET(fd, &read_fds);
       12:  426:            max_fd = std::max(max_fd, fd);
        -:  427:        }
        -:  428:
        -:  429:        struct timeval timeout;
       33:  430:        struct timeval* timeout_ptr = nullptr;
       33:  431:        if (timeout_seconds >= 0) {
       21:  432:            timeout.tv_sec = timeout_seconds;
       21:  433:            timeout.tv_usec = 0;
       21:  434:            timeout_ptr = &timeout;
        -:  435:        }
        -:  436:
       33:  437:        int ready = select(max_fd + 1, &read_fds, nullptr, nullptr, timeout_ptr);
       33:  438:        if (ready < 0) {
        4:  439:            std::cerr << "Error in select\n";
        5:  440:            break;
        -:  441:        }
       29:  442:        if (ready == 0) {
        1:  443:            std::cout << "Timeout: no activity for " << timeout_seconds << " seconds.\n";
        1:  444:            break;
        -:  445:        }
        -:  446:
        -:  447:        // — stdin commands (SOFT DRINK / VODKA / CHAMPAGNE) —
       28:  448:        if (FD_ISSET(STDIN_FILENO, &read_fds)) {
        8:  449:            std::string input;
        8:  450:            if (std::getline(std::cin, input)) {
        8:  451:                if (input == "GEN SOFT DRINK") {
        2:  452:                    auto nwater   = std::min(invPtr->hydrogen/2,       invPtr->oxygen);
        2:  453:                    auto nco2     = std::min(invPtr->carbon,           invPtr->oxygen/2);
    #####:  454:                    auto nglucose = std::min({invPtr->carbon/6,
        2:  455:                                              invPtr->hydrogen/12,
        2:  456:                                              invPtr->oxygen/6});
        2:  457:                    auto softdrinksamount = std::min({nwater, nco2, nglucose});
        2:  458:                    std::cout << "SOFT DRINK: " << softdrinksamount << "\n";
        6:  459:                } else if (input == "GEN VODKA") {
        1:  460:                    auto nwater   = std::min(invPtr->hydrogen/6, invPtr->oxygen);
    #####:  461:                    auto nalcohol = std::min({invPtr->carbon/2,
        1:  462:                                              invPtr->hydrogen/6,
        1:  463:                                              invPtr->oxygen});
    #####:  464:                    auto nglucose = std::min({invPtr->carbon/2,
        1:  465:                                              invPtr->hydrogen/12,
        1:  466:                                              invPtr->oxygen/6});
        1:  467:                    auto vodkaamount = std::min({nwater, nalcohol, nglucose});
        1:  468:                    std::cout << "VODKA: " << vodkaamount << "\n";
        5:  469:                } else if (input == "GEN CHAMPAGNE") {
        3:  470:                    auto nwater   = std::min(invPtr->hydrogen/2, invPtr->oxygen);
        3:  471:                    auto nco2     = std::min(invPtr->carbon,     invPtr->oxygen/2);
    #####:  472:                    auto nalcohol = std::min({invPtr->carbon/2,
        3:  473:                                              invPtr->hydrogen/6,
        3:  474:                                              invPtr->oxygen});
        3:  475:                    auto champagneamount = std::min({nwater, nco2, nalcohol});
        3:  476:                    std::cout << "CHAMPAGNE: " << champagneamount << "\n";
        -:  477:                } else {
        2:  478:                    std::cout << "Unknown command\n";
        -:  479:                }
        -:  480:            }
        8:  481:        }
        -:  482:
        -:  483:        // — new TCP connection? —
       28:  484:        if (listener >= 0 && FD_ISSET(listener, &read_fds)) {
        1:  485:            sockaddr_in cli_addr{};
        1:  486:            socklen_t cli_len = sizeof(cli_addr);
        1:  487:            int client_fd = accept(listener, (sockaddr*)&cli_addr, &cli_len);
        1:  488:            if (client_fd < 0) {
    #####:  489:                std::cerr << "Error accepting TCP connection\n";
        -:  490:            } else {
        -:  491:                // setNonBlocking(client_fd);
        1:  492:                clients.push_back(client_fd);
        -:  493:                std::cout << "New TCP client: "
        1:  494:                          << inet_ntoa(cli_addr.sin_addr) << ":"
        1:  495:                          << ntohs(cli_addr.sin_port) << "\n";
        -:  496:            }
        -:  497:        }
        -:  498:
        -:  499:        // — new UDS-stream connection? —
       28:  500:        if (uds_stream_sock >= 0 && FD_ISSET(uds_stream_sock, &read_fds)) {
        1:  501:            sockaddr_un cli_addr_un{};
        1:  502:            socklen_t cli_len_un = sizeof(cli_addr_un);
        1:  503:            int client_fd = accept(uds_stream_sock,
        -:  504:                                   (sockaddr*)&cli_addr_un,
        1:  505:                                   &cli_len_un);
        1:  506:            if (client_fd < 0) {
    #####:  507:                std::cerr << "Error accepting UDS-stream connection\n";
        -:  508:            } else {
        -:  509:                // setNonBlocking(client_fd);
        1:  510:                clients.push_back(client_fd);
        1:  511:                std::cout << "New UDS-stream client connected\n";
        -:  512:            }
        -:  513:        }
        -:  514:
        -:  515:        // — UDP datagram request? —
       28:  516:        if (udpSock >= 0 && FD_ISSET(udpSock, &read_fds)) {
        -:  517:            char buf[READ_BUFFER];
        4:  518:            sockaddr_in cli_addr{};
        4:  519:            socklen_t cli_len = sizeof(cli_addr);
        4:  520:            ssize_t n = recvfrom(udpSock, buf, sizeof(buf), 0,
        -:  521:                                 (sockaddr*)&cli_addr, &cli_len);
        4:  522:            if (n < 0) {
    #####:  523:                std::cerr << "Error receiving UDP data\n";
        -:  524:            } else {
        -:  525:                char ip[INET_ADDRSTRLEN];
        4:  526:                inet_ntop(AF_INET, &cli_addr.sin_addr, ip, sizeof(ip));
        4:  527:                int port = ntohs(cli_addr.sin_port);
        8:  528:                std::string peer_id = std::string(ip) + ":" + std::to_string(port);
        4:  529:                if (udp_peers.insert(peer_id).second) {
        1:  530:                    std::cout << "New UDP client: " << peer_id << "\n";
        -:  531:                }
        4:  532:                std::string cmd(buf, n);
       4*:  533:                if (!cmd.empty() && cmd.back() == '\n') {
        4:  534:                    cmd.pop_back();
        -:  535:                }
        4:  536:                processDatagramCommand(udpSock, cmd,
        -:  537:                                       (sockaddr*)&cli_addr, cli_len);
        4:  538:            }
        -:  539:        }
        -:  540:
        -:  541:        // — UDS-datagram request? —
       28:  542:        if (uds_dgram_sock >= 0 && FD_ISSET(uds_dgram_sock, &read_fds)) {
        -:  543:            char buf[READ_BUFFER];
        2:  544:            sockaddr_un cli_addr_un{};
        2:  545:            socklen_t cli_len_un = sizeof(cli_addr_un);
        2:  546:            ssize_t n = recvfrom(uds_dgram_sock, buf, sizeof(buf), 0,
        -:  547:                                 (sockaddr*)&cli_addr_un, &cli_len_un);
        2:  548:            if (n < 0) {
    #####:  549:                std::cerr << "Error receiving UDS-datagram data\n";
        -:  550:            } else {
        2:  551:                std::string peer_path(cli_addr_un.sun_path);
        2:  552:                if (udp_peers.insert(peer_path).second) {
        1:  553:                    std::cout << "New UDS-datagram peer: " << peer_path << "\n";
        -:  554:                }
        2:  555:                std::string cmd(buf, n);
       2*:  556:                if (!cmd.empty() && cmd.back() == '\n') {
        2:  557:                    cmd.pop_back();
        -:  558:                }
        2:  559:                processDatagramCommand(uds_dgram_sock, cmd,
        -:  560:                                       (sockaddr*)&cli_addr_un, cli_len_un);
        2:  561:            }
        -:  562:        }
        -:  563:
        -:  564:        // — handle data from any “stream” client (TCP or UDS-stream) —
       42:  565:        for (auto it = clients.begin(); it != clients.end();) {
       14:  566:            int client_fd = *it;
       14:  567:            if (FD_ISSET(client_fd, &read_fds)) {
        -:  568:                char buffer[READ_BUFFER];
       12:  569:                ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
       12:  570:                if (bytes_read <= 0) {
        2:  571:                    close(client_fd);
        2:  572:                    it = clients.erase(it);
        2:  573:                    std::cout << "Stream client disconnected\n";
        2:  574:                    continue;
        -:  575:                }
       10:  576:                buffer[bytes_read] = '\0';
       10:  577:                std::string line(buffer);
      10*:  578:                if (!line.empty() && line.back() == '\n') {
       10:  579:                    line.pop_back();
        -:  580:                }
       10:  581:                processTCPCommand(client_fd, line);
       10:  582:            }
       12:  583:            ++it;
        -:  584:        }
        -:  585:    }
        -:  586:
        -:  587:    // — clean up —
       5*:  588:    for (int client_fd : clients) {
    #####:  589:        close(client_fd);
        -:  590:    }
        5:  591:    if (listener >= 0)      close(listener);
        5:  592:    if (udpSock >= 0)       close(udpSock);
        5:  593:    if (uds_stream_sock >= 0) {
        2:  594:        close(uds_stream_sock);
        2:  595:        unlink(uds_stream_path.c_str());
        -:  596:    }
        5:  597:    if (uds_dgram_sock >= 0) {
        2:  598:        close(uds_dgram_sock);
        2:  599:        unlink(uds_datagram_path.c_str());
        -:  600:    }
        -:  601:
        5:  602:    if (use_file) {
        3:  603:        munmap(invPtr, sizeof(Inventory));
        3:  604:        close(save_fd);
        -:  605:    } else {
        2:  606:        delete invPtr;
        -:  607:    }
        5:  608:    return 0;
        8:  609:}
