        -:    0:Source:drinks_bar.cpp
        -:    0:Graph:drinks_bar.gcno
        -:    0:Data:drinks_bar.gcda
        -:    0:Runs:7
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <vector>
        -:    5:#include <map>
        -:    6:#include <array>
        -:    7:#include <cstring>
        -:    8:#include <cstdlib>
        -:    9:#include <unistd.h>
        -:   10:#include <fcntl.h>
        -:   11:#include <sys/types.h>
        -:   12:#include <sys/socket.h>
        -:   13:#include <netinet/in.h>
        -:   14:#include <arpa/inet.h>
        -:   15:#include <set>
        -:   16:#include <algorithm>
        -:   17:#include <getopt.h>
        -:   18:#include <sys/time.h>
        -:   19:#include <sys/un.h>
        -:   20:#include <signal.h>
        -:   21:
        -:   22:
        -:   23:constexpr size_t READ_BUFFER = 1024;
        -:   24:constexpr unsigned long long MAX_ATOMS = 1000000000000000000ULL;
        -:   25:
        -:   26:static volatile sig_atomic_t keep_running = 1;
        -:   27:
        -:   28:// Map molecule name to its atom requirements: {C, H, O}
        -:   29:const std::map<std::string, std::array<unsigned long long,3>> molecule_req = {
        -:   30:    {"WATER",          {0, 2, 1}}, // H2O
        -:   31:    {"CARBON DIOXIDE", {1, 0, 2}}, // CO2
        -:   32:    {"GLUCOSE",        {6, 12, 6}}, // C6H12O6
        -:   33:    {"ALCOHOL",        {2, 6, 1}}, // C2H6O
        -:   34:};
        -:   35:
        -:   36:// Utility: set a socket to non-blocking mode
        9:   37:int setNonBlocking(int fd) {
        9:   38:    int flags = fcntl(fd, F_GETFL, 0);
       9*:   39:    if (flags < 0) return -1;
        9:   40:    return fcntl(fd, F_SETFL, flags | O_NONBLOCK);
        -:   41:}
        -:   42:
        6:   43:void sendTCPStatus(int fd, unsigned long long carbon, unsigned long long oxygen, unsigned long long hydrogen) {
        6:   44:    std::ostringstream oss;
        6:   45:    oss << "CARBON: "  << carbon  << "\n"
        6:   46:        << "OXYGEN: "  << oxygen  << "\n"
        6:   47:        << "HYDROGEN: "<< hydrogen<< "\n";
        6:   48:    std::string status = oss.str();
        6:   49:    send(fd, status.c_str(), status.size(), 0);
        6:   50:}
        -:   51:
        -:   52:// Process a single “ADD <TYPE> <AMOUNT>” line for TCP/UDS-stream
       15:   53:void processTCPCommand(int fd,
        -:   54:                       const std::string& line,
        -:   55:                       unsigned long long& carbon,
        -:   56:                       unsigned long long& oxygen,
        -:   57:                       unsigned long long& hydrogen)
        -:   58:{
       15:   59:    std::istringstream iss(line);
       15:   60:    std::string cmd, type;
        -:   61:    unsigned long long amount;
        -:   62:
       15:   63:    if (!(iss >> cmd >> type >> amount) || cmd != "ADD" || amount > MAX_ATOMS) {
        6:   64:        const char* err = "ERROR: Invalid command\n";
        6:   65:        send(fd, err, strlen(err), 0);
        6:   66:        return;
        -:   67:    }
        -:   68:
        9:   69:    unsigned long long* counter = nullptr;
        9:   70:    if (type == "CARBON") {
        3:   71:        counter = &carbon;
        6:   72:    } else if (type == "HYDROGEN") {
        2:   73:        counter = &hydrogen;
        4:   74:    } else if (type == "OXYGEN") {
        2:   75:        counter = &oxygen;
        -:   76:    } else {
        2:   77:        const char* err = "ERROR: Unknown atom type\n";
        2:   78:        send(fd, err, strlen(err), 0);
        2:   79:        return;
        -:   80:    }
        -:   81:
        -:   82:    // overflow check
        7:   83:    if (*counter + amount < *counter || *counter + amount > MAX_ATOMS) {
        1:   84:        const char* err = "ERROR: Overflow error\n";
        1:   85:        send(fd, err, strlen(err), 0);
        1:   86:        return;
        -:   87:    }
        -:   88:
        6:   89:    *counter += amount;
        6:   90:    sendTCPStatus(fd, carbon, oxygen, hydrogen);
       33:   91:}
        -:   92:
        -:   93:// Process a single “DELIVER <MOLECULE> <COUNT>” line for UDP/UDS-datagram
        8:   94:void processDatagramCommand(int sock,
        -:   95:                            const std::string& line,
        -:   96:                            const sockaddr* cli_addr,
        -:   97:                            socklen_t cli_len,
        -:   98:                            unsigned long long& carbon,
        -:   99:                            unsigned long long& oxygen,
        -:  100:                            unsigned long long& hydrogen)
        -:  101:{
        8:  102:    std::istringstream iss(line);
        8:  103:    std::string cmd;
        8:  104:    if (!(iss >> cmd) || cmd != "DELIVER") {
        2:  105:        const char* err = "ERROR: invalid command";
        2:  106:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        2:  107:        return;
        -:  108:    }
        -:  109:
        -:  110:    // Collect tokens: everything except the last token is part of molecule name
        6:  111:    std::vector<std::string> tokens;
        6:  112:    std::string token;
       15:  113:    while (iss >> token) {
        9:  114:        tokens.push_back(token);
        -:  115:    }
        6:  116:    if (tokens.size() < 2) {
        3:  117:        const char* err = "ERROR: invalid command";
        3:  118:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        3:  119:        return;
        -:  120:    }
        -:  121:
        -:  122:    // Last token = count
        3:  123:    unsigned long long count = 0;
        -:  124:    try {
        3:  125:        count = std::stoull(tokens.back());
    =====:  126:    } catch (...) {
    =====:  127:        const char* err = "ERROR: invalid number";
    =====:  128:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
    =====:  129:        return;
    =====:  130:    }
        -:  131:
        -:  132:    // Reconstruct molecule name from tokens[0..n-2]
        3:  133:    std::string mol = tokens[0];
       3*:  134:    for (size_t i = 1; i + 1 < tokens.size(); ++i) {
    #####:  135:        mol += " ";
    #####:  136:        mol += tokens[i];
        -:  137:    }
        -:  138:
        3:  139:    auto it = molecule_req.find(mol);
        3:  140:    if (it == molecule_req.end()) {
    #####:  141:        const char* err = "ERROR: unknown molecule";
    #####:  142:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
    #####:  143:        return;
        -:  144:    }
        -:  145:
        3:  146:    auto req = it->second; // {C, H, O}
        3:  147:    unsigned long long needC = req[0] * count;
        3:  148:    unsigned long long needH = req[1] * count;
        3:  149:    unsigned long long needO = req[2] * count;
        -:  150:
        3:  151:    if (carbon >= needC && hydrogen >= needH && oxygen >= needO) {
        2:  152:        carbon   -= needC;
        2:  153:        hydrogen -= needH;
        2:  154:        oxygen   -= needO;
        2:  155:        std::ostringstream oss;
        -:  156:        oss << "OK\n"
        2:  157:            << "CARBON: "  << carbon  << "\n"
        2:  158:            << "OXYGEN: "  << oxygen  << "\n"
        2:  159:            << "HYDROGEN: "<< hydrogen;
        2:  160:        std::string ok = oss.str();
        2:  161:        sendto(sock, ok.c_str(), ok.size(), 0, cli_addr, cli_len);
        2:  162:    } else {
        1:  163:        const char* err = "ERROR: insufficient atoms";
        1:  164:        sendto(sock, err, strlen(err), 0, cli_addr, cli_len);
        -:  165:    }
       19:  166:}
        -:  167:
        2:  168:void signalHandler(int) {
        2:  169:    keep_running = 0;
        2:  170:}
        -:  171:
        7:  172:int main(int argc, char* argv[]) {
        -:  173:    // Command-line state
        7:  174:    unsigned long long initcarbon = 0, initoxygen = 0, inithydrogen = 0;
        7:  175:    int timeout_seconds = -1;
        7:  176:    int tcp_port = -1, udp_port = -1;
        7:  177:    std::string uds_stream_path, uds_datagram_path;
        -:  178:
        7:  179:    signal(SIGINT, signalHandler);
        -:  180:
        -:  181:    static struct option long_options[] = {
        -:  182:        {"oxygen",        required_argument, nullptr, 'o'},
        -:  183:        {"hydrogen",      required_argument, nullptr, 'h'},
        -:  184:        {"carbon",        required_argument, nullptr, 'c'},
        -:  185:        {"timeout",       required_argument, nullptr, 't'},
        -:  186:        {"tcp-port",      required_argument, nullptr, 'T'},
        -:  187:        {"udp-port",      required_argument, nullptr, 'U'},
        -:  188:        {"stream-path",   required_argument, nullptr, 's'},
        -:  189:        {"datagram-path", required_argument, nullptr, 'd'},
        -:  190:        {nullptr, 0, nullptr, 0}
        -:  191:    };
        -:  192:
        -:  193:    int opt;
       18:  194:    while ((opt = getopt_long(argc, argv, "o:h:c:t:T:U:s:d:", long_options, nullptr)) != -1) {
       11:  195:        switch (opt) {
    #####:  196:            case 'o':
    #####:  197:                initoxygen  = std::stoull(optarg);
    #####:  198:                break;
    #####:  199:            case 'h':
    #####:  200:                inithydrogen= std::stoull(optarg);
    #####:  201:                break;
    #####:  202:            case 'c':
    #####:  203:                initcarbon  = std::stoull(optarg);
    #####:  204:                break;
    #####:  205:            case 't':
    #####:  206:                timeout_seconds = std::stoi(optarg);
    #####:  207:                break;
        3:  208:            case 'T':
        3:  209:                tcp_port = std::stoi(optarg);
        3:  210:                break;
        3:  211:            case 'U':
        3:  212:                udp_port = std::stoi(optarg);
        3:  213:                break;
        3:  214:            case 's':
        3:  215:                uds_stream_path = optarg;
        3:  216:                break;
        2:  217:            case 'd':
        2:  218:                uds_datagram_path = optarg;
        2:  219:                break;
    #####:  220:            default:
        -:  221:                std::cerr << "Usage: " << argv[0]
        -:  222:                          << " [-o amount] [-c amount] [-h amount] [-t seconds]"
        -:  223:                             " [-T tcp_port] [-U udp_port]"
    #####:  224:                             " [-s uds_stream_path] [-d uds_datagram_path]\n";
    #####:  225:                return 1;
        -:  226:        }
        -:  227:    }
        -:  228:
        -:  229:    // Must specify at least TCP or UDS-stream for "TCP-like" service,
        -:  230:    // and at least UDP or UDS-datagram for "UDP-like" service.
        7:  231:    if (tcp_port < 0 && uds_stream_path.empty()) {
        1:  232:        std::cerr << "ERROR: You must specify either -T <tcp-port> or -s <uds-stream-path>\n";
        1:  233:        return 1;
        -:  234:    }
        6:  235:    if (udp_port < 0 && uds_datagram_path.empty()) {
        1:  236:        std::cerr << "ERROR: You must specify either -U <udp-port> or -d <uds-datagram-path>\n";
        1:  237:        return 1;
        -:  238:    }
        -:  239:
        5:  240:    unsigned long long carbon = initcarbon;
        5:  241:    unsigned long long oxygen = initoxygen;
        5:  242:    unsigned long long hydrogen = inithydrogen;
        -:  243:
       10:  244:    std::set<std::string> udp_peers;
        -:  245:
        -:  246:    // --- 1) SET UP TCP listener (if requested) ---
        5:  247:    int listener = -1;
        5:  248:    if (tcp_port >= 0) {
        3:  249:        listener = socket(AF_INET, SOCK_STREAM, 0);
        3:  250:        if (listener < 0) {
    #####:  251:            std::cerr << "Error creating TCP socket\n";
       1*:  252:            return 1;
        -:  253:        }
        3:  254:        int sockopt = 1;
        3:  255:        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &sockopt, sizeof(sockopt));
        3:  256:        sockaddr_in addr{};
        3:  257:        addr.sin_family = AF_INET;
        3:  258:        addr.sin_addr.s_addr = INADDR_ANY;
        3:  259:        addr.sin_port = htons(tcp_port);
        3:  260:        if (bind(listener, (sockaddr*)&addr, sizeof(addr)) < 0) {
        1:  261:            std::cerr << "Error binding TCP socket\n";
        1:  262:            return 1;
        -:  263:        }
        2:  264:        if (listen(listener, SOMAXCONN) < 0) {
    #####:  265:            std::cerr << "Error listening on TCP socket\n";
    #####:  266:            return 1;
        -:  267:        }
        2:  268:        setNonBlocking(listener);
        2:  269:        std::cout << "Listening (TCP) on port " << tcp_port << "\n";
        -:  270:    }
        -:  271:
        -:  272:    // --- 2) SET UP UDP socket (if requested) ---
        4:  273:    int udpSock = -1;
        4:  274:    if (udp_port >= 0) {
        2:  275:        udpSock = socket(AF_INET, SOCK_DGRAM, 0);
        2:  276:        if (udpSock < 0) {
    #####:  277:            std::cerr << "Error creating UDP socket\n";
       1*:  278:            return 1;
        -:  279:        }
        2:  280:        sockaddr_in udp_addr{};
        2:  281:        udp_addr.sin_family = AF_INET;
        2:  282:        udp_addr.sin_addr.s_addr = INADDR_ANY;
        2:  283:        udp_addr.sin_port = htons(udp_port);
        2:  284:        if (bind(udpSock, (sockaddr*)&udp_addr, sizeof(udp_addr)) < 0) {
        1:  285:            std::cerr << "Error binding UDP socket\n";
        1:  286:            return 1;
        -:  287:        }
        1:  288:        setNonBlocking(udpSock);
        1:  289:        std::cout << "Listening (UDP) on port " << udp_port << "\n";
        -:  290:    }
        -:  291:
        -:  292:    // --- 3) SET UP UDS-STREAM socket (if requested) ---
        3:  293:    int uds_stream_sock = -1;
        3:  294:    if (!uds_stream_path.empty()) {
        -:  295:        // Remove existing socket file (if any)
        2:  296:        unlink(uds_stream_path.c_str());
        -:  297:
        2:  298:        uds_stream_sock = socket(AF_UNIX, SOCK_STREAM, 0);
        2:  299:        if (uds_stream_sock < 0) {
    #####:  300:            std::cerr << "Error creating UDS-stream socket\n";
    #####:  301:            return 1;
        -:  302:        }
        2:  303:        sockaddr_un uds_addr{};
        2:  304:        uds_addr.sun_family = AF_UNIX;
        2:  305:        strncpy(uds_addr.sun_path, uds_stream_path.c_str(), sizeof(uds_addr.sun_path)-1);
        -:  306:
        2:  307:        if (bind(uds_stream_sock, (sockaddr*)&uds_addr, sizeof(uds_addr)) < 0) {
    #####:  308:            std::cerr << "Error binding UDS-stream socket\n";
    #####:  309:            return 1;
        -:  310:        }
        2:  311:        if (listen(uds_stream_sock, SOMAXCONN) < 0) {
    #####:  312:            std::cerr << "Error listening on UDS-stream socket\n";
    #####:  313:            return 1;
        -:  314:        }
        2:  315:        setNonBlocking(uds_stream_sock);
        2:  316:        std::cout << "Listening (UDS-stream) on " << uds_stream_path << "\n";
        -:  317:    }
        -:  318:
        -:  319:    // --- 4) SET UP UDS-DATAGRAM socket (if requested) ---
        3:  320:    int uds_dgram_sock = -1;
        3:  321:    if (!uds_datagram_path.empty()) {
        -:  322:        // Remove existing socket file (if any)
        2:  323:        unlink(uds_datagram_path.c_str());
        -:  324:
        2:  325:        uds_dgram_sock = socket(AF_UNIX, SOCK_DGRAM, 0);
        2:  326:        if (uds_dgram_sock < 0) {
    #####:  327:            std::cerr << "Error creating UDS-datagram socket\n";
       1*:  328:            return 1;
        -:  329:        }
        2:  330:        sockaddr_un uds_dg_addr{};
        2:  331:        uds_dg_addr.sun_family = AF_UNIX;
        2:  332:        strncpy(uds_dg_addr.sun_path, uds_datagram_path.c_str(), sizeof(uds_dg_addr.sun_path)-1);
        -:  333:
        2:  334:        if (bind(uds_dgram_sock, (sockaddr*)&uds_dg_addr, sizeof(uds_dg_addr)) < 0) {
        1:  335:            std::cerr << "Error binding UDS-datagram socket\n";
        1:  336:            return 1;
        -:  337:        }
        1:  338:        setNonBlocking(uds_dgram_sock);
        1:  339:        std::cout << "Listening (UDS-datagram) on " << uds_datagram_path << "\n";
        -:  340:    }
        -:  341:
        -:  342:    // Clients vector holds all accepted “TCP-like” connections (both AF_INET and AF_UNIX-stream)
        4:  343:    std::vector<int> clients;
        2:  344:    std::map<int, std::string> recv_buffer;
        -:  345:
        -:  346:    fd_set read_fds;
       39:  347:    while (keep_running) {
      663:  348:        FD_ZERO(&read_fds);
       39:  349:        FD_SET(STDIN_FILENO, &read_fds);
       39:  350:        int max_fd = STDIN_FILENO;
        -:  351:
       39:  352:        if (listener >= 0) {
       15:  353:            FD_SET(listener, &read_fds);
       15:  354:            max_fd = std::max(max_fd, listener);
        -:  355:        }
       39:  356:        if (uds_stream_sock >= 0) {
       24:  357:            FD_SET(uds_stream_sock, &read_fds);
       24:  358:            max_fd = std::max(max_fd, uds_stream_sock);
        -:  359:        }
       39:  360:        if (udpSock >= 0) {
       15:  361:            FD_SET(udpSock, &read_fds);
       15:  362:            max_fd = std::max(max_fd, udpSock);
        -:  363:        }
       39:  364:        if (uds_dgram_sock >= 0) {
       24:  365:            FD_SET(uds_dgram_sock, &read_fds);
       24:  366:            max_fd = std::max(max_fd, uds_dgram_sock);
        -:  367:        }
       57:  368:        for (int fd : clients) {
       18:  369:            FD_SET(fd, &read_fds);
       18:  370:            max_fd = std::max(max_fd, fd);
        -:  371:        }
        -:  372:
        -:  373:        struct timeval timeout;
       39:  374:        struct timeval* timeout_ptr = nullptr;
       39:  375:        if (timeout_seconds >= 0) {
    #####:  376:            timeout.tv_sec = timeout_seconds;
    #####:  377:            timeout.tv_usec = 0;
    #####:  378:            timeout_ptr = &timeout;
        -:  379:        }
        -:  380:
       39:  381:        int ready = select(max_fd + 1, &read_fds, nullptr, nullptr, timeout_ptr);
       39:  382:        if (ready < 0) {
        2:  383:            std::cerr << "Error in select\n";
        2:  384:            break;
        -:  385:        }
       37:  386:        if (ready == 0) {
    #####:  387:            std::cout << "Timeout: no activity for " << timeout_seconds << " seconds.\n";
    #####:  388:            break;
        -:  389:        }
        -:  390:
        -:  391:        // — stdin commands (SOFT DRINK, VODKA, CHAMPAGNE) —
       37:  392:        if (FD_ISSET(STDIN_FILENO, &read_fds)) {
        8:  393:            std::string input;
        8:  394:            if (std::getline(std::cin, input)) {
        8:  395:                if (input == "GEN SOFT DRINK") {
        5:  396:                    auto nwater   = std::min(hydrogen/2,       oxygen);
        5:  397:                    auto nco2     = std::min(carbon,           oxygen/2);
        5:  398:                    auto nglucose = std::min({carbon/6, hydrogen/12, oxygen/6});
        5:  399:                    auto softdrinksamount = std::min({nwater, nco2, nglucose});
        5:  400:                    std::cout << "SOFT DRINK: " << softdrinksamount << "\n";
        -:  401:                }
        3:  402:                else if (input == "GEN VODKA") {
    #####:  403:                    auto nwater   = std::min(hydrogen/6, oxygen);
    #####:  404:                    auto nalcohol = std::min({carbon/2, hydrogen/6, oxygen});
    #####:  405:                    auto nglucose = std::min({carbon/2, hydrogen/12, oxygen/6});
    #####:  406:                    auto vodkaamount = std::min({nwater, nalcohol, nglucose});
    #####:  407:                    std::cout << "VODKA: " << vodkaamount << "\n";
        -:  408:                }
        3:  409:                else if (input == "GEN CHAMPAGNE") {
        1:  410:                    auto nwater   = std::min(hydrogen/2, oxygen);
        1:  411:                    auto nco2     = std::min(carbon,     oxygen/2);
        1:  412:                    auto nalcohol = std::min({carbon/2, hydrogen/6, oxygen});
        1:  413:                    auto champagneamount = std::min({nwater, nco2, nalcohol});
        1:  414:                    std::cout << "CHAMPAGNE: " << champagneamount << "\n";
        -:  415:                }
        -:  416:                else {
        2:  417:                    std::cout << "Unknown command\n";
        -:  418:                }
        -:  419:            }
        8:  420:        }
        -:  421:
        -:  422:        // — new TCP connection? —
       37:  423:        if (listener >= 0 && FD_ISSET(listener, &read_fds)) {
        1:  424:            sockaddr_in cli_addr{};
        1:  425:            socklen_t cli_len = sizeof(cli_addr);
        1:  426:            int client_fd = accept(listener, (sockaddr*)&cli_addr, &cli_len);
        1:  427:            if (client_fd < 0) {
    #####:  428:                std::cerr << "Error accepting TCP connection\n";
        -:  429:            } else {
        1:  430:                setNonBlocking(client_fd);
        1:  431:                clients.push_back(client_fd);
        -:  432:                std::cout << "New TCP client: "
        1:  433:                          << inet_ntoa(cli_addr.sin_addr) << ":"
        1:  434:                          << ntohs(cli_addr.sin_port) << "\n";
        -:  435:            }
        -:  436:        }
        -:  437:
        -:  438:        // — new UDS-stream connection? —
       37:  439:        if (uds_stream_sock >= 0 && FD_ISSET(uds_stream_sock, &read_fds)) {
        2:  440:            sockaddr_un cli_addr_un{};
        2:  441:            socklen_t cli_len_un = sizeof(cli_addr_un);
        2:  442:            int client_fd = accept(uds_stream_sock, (sockaddr*)&cli_addr_un, &cli_len_un);
        2:  443:            if (client_fd < 0) {
    #####:  444:                std::cerr << "Error accepting UDS-stream connection\n";
        -:  445:            } else {
        2:  446:                setNonBlocking(client_fd);
        2:  447:                clients.push_back(client_fd);
        2:  448:                std::cout << "New UDS-stream client connected\n";
        -:  449:            }
        -:  450:        }
        -:  451:
        -:  452:        // — UDP datagram request? —
       37:  453:        if (udpSock >= 0 && FD_ISSET(udpSock, &read_fds)) {
        -:  454:            char buf[READ_BUFFER];
        3:  455:            sockaddr_in cli_addr{};
        3:  456:            socklen_t cli_len = sizeof(cli_addr);
        3:  457:            ssize_t n = recvfrom(udpSock, buf, sizeof(buf), 0, (sockaddr*)&cli_addr, &cli_len);
        3:  458:            if (n < 0) {
    #####:  459:                std::cerr << "Error receiving UDP data\n";
        -:  460:            } else {
        -:  461:                char ip[INET_ADDRSTRLEN];
        3:  462:                inet_ntop(AF_INET, &cli_addr.sin_addr, ip, sizeof(ip));
        3:  463:                int port = ntohs(cli_addr.sin_port);
        6:  464:                std::string peer_id = std::string(ip) + ":" + std::to_string(port);
        3:  465:                if (udp_peers.insert(peer_id).second) {
        1:  466:                    std::cout << "New UDP client: " << peer_id << "\n";
        -:  467:                }
        3:  468:                std::string cmd(buf, n);
       3*:  469:                if (!cmd.empty() && cmd.back() == '\n') {
        3:  470:                    cmd.pop_back();
        -:  471:                }
        3:  472:                processDatagramCommand(udpSock, cmd, (sockaddr*)&cli_addr, cli_len,
        -:  473:                                       carbon, oxygen, hydrogen);
        3:  474:            }
        -:  475:        }
        -:  476:
        -:  477:        // — UDS-datagram request? —
       37:  478:        if (uds_dgram_sock >= 0 && FD_ISSET(uds_dgram_sock, &read_fds)) {
        -:  479:            char buf[READ_BUFFER];
        5:  480:            sockaddr_un cli_addr_un{};
        5:  481:            socklen_t cli_len_un = sizeof(cli_addr_un);
        5:  482:            ssize_t n = recvfrom(uds_dgram_sock, buf, sizeof(buf), 0,
        -:  483:                                 (sockaddr*)&cli_addr_un, &cli_len_un);
        5:  484:            if (n < 0) {
    #####:  485:                std::cerr << "Error receiving UDS-datagram data\n";
        -:  486:            } else {
        5:  487:                std::string peer_path(cli_addr_un.sun_path);
        5:  488:                if (udp_peers.insert(peer_path).second) {
        1:  489:                    std::cout << "New UDS-datagram peer: " << peer_path << "\n";
        -:  490:                }
        5:  491:                std::string cmd(buf, n);
       5*:  492:                if (!cmd.empty() && cmd.back() == '\n') {
        5:  493:                    cmd.pop_back();
        -:  494:                }
        5:  495:                processDatagramCommand(uds_dgram_sock, cmd,
        -:  496:                                       (sockaddr*)&cli_addr_un, cli_len_un,
        -:  497:                                       carbon, oxygen, hydrogen);
        5:  498:            }
        -:  499:        }
        -:  500:
        -:  501:        // — handle data from any “stream” client (TCP or UDS-stream) —
       58:  502:        for (auto it = clients.begin(); it != clients.end();) {
       21:  503:            int client_fd = *it;
       21:  504:            if (FD_ISSET(client_fd, &read_fds)) {
        -:  505:                char buffer[READ_BUFFER];
       18:  506:                ssize_t bytes_read = recv(client_fd, buffer, sizeof(buffer), 0);
       18:  507:                if (bytes_read <= 0) {
        3:  508:                    close(client_fd);
        3:  509:                    it = clients.erase(it);
        3:  510:                    std::cout << "Stream client disconnected\n";
        3:  511:                    continue;
        -:  512:                }
       15:  513:                buffer[bytes_read] = '\0';
       15:  514:                std::string line(buffer);
      15*:  515:                if (!line.empty() && line.back() == '\n') {
       15:  516:                    line.pop_back();
        -:  517:                }
       15:  518:                processTCPCommand(client_fd, line, carbon, oxygen, hydrogen);
       15:  519:            }
       18:  520:            ++it;
        -:  521:        }
        -:  522:    }
        -:  523:
        -:  524:    // — clean up —
       2*:  525:    for (int client_fd : clients) {
    #####:  526:        close(client_fd);
        -:  527:    }
        2:  528:    if (listener >= 0)      close(listener);
        2:  529:    if (udpSock >= 0)       close(udpSock);
        2:  530:    if (uds_stream_sock >= 0) {
        1:  531:        close(uds_stream_sock);
        1:  532:        unlink(uds_stream_path.c_str());
        -:  533:    }
        2:  534:    if (uds_dgram_sock >= 0) {
        1:  535:        close(uds_dgram_sock);
        1:  536:        unlink(uds_datagram_path.c_str());
        -:  537:    }
        2:  538:    return 0;
        7:  539:}
