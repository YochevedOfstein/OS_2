        -:    0:Source:molecule_requester.cpp
        -:    0:Graph:molecule_requester.gcno
        -:    0:Data:molecule_requester.gcda
        -:    0:Runs:2
        -:    1:#include <iostream>
        -:    2:#include <sstream>
        -:    3:#include <string>
        -:    4:#include <cstring>
        -:    5:#include <cstdlib>
        -:    6:#include <unistd.h>
        -:    7:#include <fcntl.h>
        -:    8:#include <sys/types.h>
        -:    9:#include <sys/socket.h>
        -:   10:#include <netdb.h>
        -:   11:#include <arpa/inet.h>
        -:   12:
        -:   13:enum{
        -:   14:    UDP_BUFFER_SIZE = 1024,
        -:   15:};
        -:   16:
        -:   17:constexpr size_t TCP_BUFFER_SIZE = 1024;
        -:   18:
       10:   19:std::string readTCPLine(int fd) {
       10:   20:    std::string line;
        -:   21:    char c;
        -:   22:    while(true) {
      119:   23:        ssize_t n = recv(fd, &c, 1, 0);
      119:   24:        if (n <= 0){
    #####:   25:            return std::string();
        -:   26:        }
      119:   27:        if (c == '\n') {
       10:   28:            break;
        -:   29:        }
      109:   30:        line.push_back(c);
      109:   31:    }
       10:   32:    return line;
       10:   33:}
        -:   34:
        2:   35:int main(int argc, char* argv[]) {
        2:   36:    if (argc != 4) {
        1:   37:        std::cerr << "Usage: " << argv[0] << " <server> <tcp_port> <udp_port>\n";
        1:   38:        return 1;
        -:   39:    }
        1:   40:    const char* server = argv[1];
        1:   41:    const char* tcp_port = argv[2];
        1:   42:    const char* udp_port = argv[3];
        -:   43:
        -:   44:    // --- TCP setup for ADD commands --- 
        1:   45:    addrinfo TCPhints{}, *resTCP;
        1:   46:    TCPhints.ai_family = AF_UNSPEC;
        1:   47:    TCPhints.ai_socktype = SOCK_STREAM;
        -:   48:
        1:   49:    if(getaddrinfo(server, tcp_port, &TCPhints, &resTCP) != 0) {
    #####:   50:        std::cerr << "Error getting address info (TCP)" << "\n";
    #####:   51:        return 1;
        -:   52:    }
        -:   53:
        1:   54:    int tcpsock = -1;
       1*:   55:    for (addrinfo* p = resTCP; p != nullptr; p = p->ai_next) {
        1:   56:        tcpsock = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
       1*:   57:        if (tcpsock < 0) {
    #####:   58:            continue;
        -:   59:        }
        1:   60:        if (connect(tcpsock, p->ai_addr, p->ai_addrlen) == 0) {
        1:   61:            break;
        -:   62:        }
    #####:   63:        close(tcpsock);
    #####:   64:        tcpsock = -1;
        -:   65:    }
        1:   66:    freeaddrinfo(resTCP);
        1:   67:    if (tcpsock < 0){
    #####:   68:        std::cerr << "ERROR: Unable to connect TCP socket" << "\n";
    #####:   69:        return 1;
        -:   70:    }
        -:   71:
        -:   72:    // --- UDP setup for DELIVER commands ---
        -:   73:
        1:   74:    addrinfo UDPhints{}, *resUDP;
        1:   75:    UDPhints.ai_family = AF_UNSPEC;
        1:   76:    UDPhints.ai_socktype = SOCK_DGRAM;
        -:   77:
        1:   78:    if (getaddrinfo(server, udp_port, &UDPhints, &resUDP) != 0) {
    #####:   79:        std::cerr << "Error getting address info (UDP)\n";
    #####:   80:        return 1;
        -:   81:    }
        -:   82:
        1:   83:    int udpsock = -1;
        -:   84:    addrinfo* p;
       1*:   85:    for (p = resUDP; p != nullptr; p = p->ai_next) {
        1:   86:        udpsock = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
       1*:   87:        if (udpsock < 0) {
    #####:   88:            continue;
        -:   89:        }
        1:   90:        break;
        -:   91:    }
        -:   92:
        1:   93:    if(p == nullptr) {
    #####:   94:        std::cerr << "Failed creating UDP socket\n";
    #####:   95:        freeaddrinfo(resUDP);
    #####:   96:        return 1;
        -:   97:    }
        -:   98:
        1:   99:    std::cout << "Connected to server: " << server << "(TCP:" << tcp_port << ", UDP: " << udp_port << ")\n";
        1:  100:    std::cout << "Type 'ADD <count>' or 'DELIVER <count>', or QUIT to exit.\n";
        -:  101:
        1:  102:    std::string input;
        -:  103:    sockaddr_storage peer;
        1:  104:    socklen_t peer_len = sizeof(peer);
        -:  105:
        -:  106:    while (true) {
        9:  107:        std::cout << "> ";
        9:  108:        if(!std::getline(std::cin, input) || input == "QUIT") {
        1:  109:            break;
        -:  110:        }
       8*:  111:        if (input.empty()) {
    #####:  112:            continue;
        -:  113:        }
        8:  114:        if (input.back() != '\n') {
        8:  115:            input.push_back('\n');
        -:  116:        }
        -:  117:
        8:  118:        bool is_add_command = input.rfind("ADD ", 0) == 0;
        -:  119:
        8:  120:        if(is_add_command) {
        4:  121:            if (send(tcpsock, input.c_str(), input.size(), 0) < 0) {
    #####:  122:                std::cerr << "Error sending data to server (TCP)" << "\n";
    #####:  123:                break;
        -:  124:            }
        4:  125:            std::string response = readTCPLine(tcpsock);
        4:  126:            if (response.empty()) {
    #####:  127:                std::cerr << "Error reading response from server (TCP)" << "\n";
    #####:  128:                goto cleanup;
        -:  129:            }
        -:  130:
        4:  131:            std::cout << response << "\n";
        -:  132:
        4:  133:            if(response.rfind("ERROR", 0) == 0) {
        1:  134:                continue;
        -:  135:            }
        -:  136:
        9:  137:            for(int i = 0; i < 2; ++i) {
        6:  138:                response = readTCPLine(tcpsock);
        6:  139:                if (response.empty()) {
    #####:  140:                    std::cerr << "Error reading response from server (TCP)" << "\n";
    #####:  141:                    goto cleanup;
        -:  142:                }
        6:  143:                std::cout << response << "\n";
        -:  144:            }
        4:  145:        }
        -:  146:
        -:  147:        else{
        4:  148:            ssize_t sent = sendto(udpsock, input.c_str(), input.size(), 0, resUDP->ai_addr, resUDP->ai_addrlen);
        4:  149:            if (sent < 0) {
    #####:  150:                std::cerr << "Error sending data" << "\n";
    #####:  151:                break;
        -:  152:            }
        -:  153:            char buffer[UDP_BUFFER_SIZE];
        4:  154:            ssize_t n = recvfrom(udpsock, buffer, sizeof(buffer) - 1, 0, (sockaddr*)&peer, &peer_len);
        4:  155:            if (n < 0) {
    #####:  156:                std::cerr << "Error receiving data" << "\n";
    #####:  157:                break;
        -:  158:            }
        4:  159:            buffer[n] = '\0'; // Null-terminate the received data
        4:  160:            std::cout << "Received from server: " << buffer << "\n";
        -:  161:        }
        -:  162:
        8:  163:    }
        1:  164:    cleanup:
        1:  165:        freeaddrinfo(resUDP);
        1:  166:        close(tcpsock);
        1:  167:        close(udpsock);
        1:  168:        std::cout << "Disconnected from server\n";
        1:  169:        return 0;
        -:  170:
        1:  171:}
